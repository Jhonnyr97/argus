constants:
  # Base URL for the Magic: The Gathering API
  base_url: "https://api.magicthegathering.io/v1"
  # Default number of items per page when paginating
  default_page_size: 10

info:
  name: "Magic: The Gathering API"
  description: "Test suite for the Magic: The Gathering API."
  schema: "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"

config:
  always_run: true
  default_timeout: 10000
  on_failure:
    send_email: true
    recipient:
      email:
        - "your_email@example.com"


tests:
  - name: "Test list all cards with pagination"
    description: "Verifica che l'endpoint restituisca una lista di carte con paginazione."
    # Check that the endpoint returns a list of cards with pagination.
    request:
      method: "GET"
      endpoint: "{{base_url}}/cards"
      params:
        page: 1
        pageSize: "{{default_page_size}}"
    expected:
      status: 200
      response:
        type: "json"
        json:
          - key: "cards"
            type: "list"
            length: "{{default_page_size}}"

  - name: "Test filter cards by name"
    description: "Verifica che l'endpoint filtri le carte per nome."
    # Check that the endpoint filters cards by name.
    request:
      method: "GET"
      endpoint: "{{base_url}}/cards"
      params:
        name: "Black Lotus"
    expected:
      status: 200
      response:
        type: "json"
        json:
          - key: "cards"
            type: "list"
          - key: "cards[0].name"
            equal: "Black Lotus"

  - name: "Test filter cards by name and check image URL"
    description: "Verifica che l'endpoint filtri le carte per nome."
    # Check that the endpoint filters cards by name.
    request:
      method: "GET"
      endpoint: "{{base_url}}/cards"
      params:
        name: "Black Lotus"
    expected:
      status: 200
      response:
        type: "json"
        json:
          - key: "cards"
            type: "list"
          - key: "cards[0].imageUrl"
            regex: 'https?:\/\/[a-zA-Z0-9\-_\.]+(\.[a-zA-Z]{2,})(\/[a-zA-Z0-9\-_\.]*)*(\?[a-zA-Z0-9=&_]*)?'

  - name: "Test filter cards by name not_equal"
    description: "Verifica che l'endpoint filtri le carte per nome."
    # Check that the endpoint filters cards by name.
    request:
      method: "GET"
      endpoint: "{{base_url}}/cards"
      params:
        name: "Black Lotus"
    expected:
      status: 200
      response:
        type: "json"
        json:
          - key: "cards"
            type: "list"
          - key: "cards[0].name"
            not_equal: "NONE"

  - name: "Test filter cards by name with response"
    description: "Verifica che l'endpoint filtri le carte per nome e restituisca dettagli."
    # Check that the endpoint filters cards by name and returns details.
    request:
      method: "GET"
      endpoint: "{{base_url}}/cards"
      params:
        name:
          response_from:
            name: "Test filter cards by name"
            response:
              json:
                - key: "cards[0].name"
        rarity:
          response_from: # get value response from another test
            name: "Test filter cards by name"
            response:
              json:
                - key: "cards[0].rarity"
    expected:
      status: 200
      response:
        type: "json"
        json:
          - key: "cards"
            type: "list"
          - key: "cards[0].name"
            equal:
              response_from: # get value response from another test
                name: "Test filter cards by name"
                response:
                  json:
                    - key: "cards[0].name"

  - name: "Test filter cards by name with multi keys"
    description: "Verifica che l'endpoint filtri le carte per nome e recuperi più chiavi."
    # Check that the endpoint filters cards by name and retrieves multiple keys.
    response_from: "Test list all cards with pagination"
    request:
      method: "GET"
      endpoint: "{{base_url}}/cards"
      params:
        name: "Archangel Avacyn // Avacyn, the Purifier"
    expected:
      status: 200
      response:
        type: "json"
        json:
          - key: "cards"
            type: "list"
          - key: "cards[0].name"
            equal: "Archangel Avacyn // Avacyn, the Purifier"
          - key: "cards[0].colorIdentity"
            type: "list"
            equal:
              - "R"
              - "W"

  - name: "Test filter cards by color"
    description: "Verifica che l'endpoint filtri le carte per colore."
    # Check that the endpoint filters cards by color.
    request:
      method: "GET"
      endpoint: "{{base_url}}/cards"
      params:
        colors: "R"
        pageSize: 5
    expected:
      status: 200
      response:
        type: "json"
        json:
          - key: "cards"
            type: "list"
            length: 5
          - key: "cards[0].colors"
            type: "list"
            contains: "R"

  - name: "Test filter cards by type"
    description: "Verifica che l'endpoint filtri le carte per tipo."
    # Check that the endpoint filters cards by type.
    request:
      method: "GET"
      endpoint: "{{base_url}}/cards"
      params:
        type: "creature"
        pageSize: 5
    expected:
      status: 200
      response:
        type: "json"
        json:
          - key: "cards"
            type: "list"
            length: 5
          - key: "cards[0].type"
            contains: "Creature"

  - name: "Test filter cards by rarity"
    description: "Verifica che l'endpoint filtri le carte per rarità."
    # Check that the endpoint filters cards by rarity.
    request:
      method: "GET"
      endpoint: "{{base_url}}/cards"
      params:
        rarity: "Mythic"  # Filter for mythic rare cards
        pageSize: 5
    expected:
      status: 200
      response:
        type: "json"
        json:
          - key: "cards"
            type: "list"
            length: 5  # Should return 5 mythic rare cards
          - key: "cards[0].rarity"
            equal: "Mythic"  # Verify that the first card is mythic rare

  - name: "Test pagination beyond available cards"
    description: "Verifica che il sistema gestisca la paginazione oltre il numero disponibile di carte."
    # Check that the system handles pagination beyond the available number of cards.
    request:
      method: "GET"
      endpoint: "{{base_url}}/cards"
      params:
        page: 1000  # Request a page number that likely exceeds available pages
        pageSize: 5
    expected:
      status: 200
      response:
        type: "json"
        json:
          - key: "cards"
            type: "list"
            length: 0  # Expect an empty list as there are no cards on this page

  - name: "Test filter cards with no results"
    description: "Verifica che l'endpoint ritorni zero carte per un filtro errato."
    # Check that the endpoint returns zero cards for an invalid filter.
    request:
      method: "GET"
      endpoint: "{{base_url}}/cards"
      params:
        name: "Nonexistent Card"  # Use a name that does not exist
    expected:
      status: 200
      response:
        type: "json"
        json:
          - key: "cards"
            type: "list"
            length: 0  # Expect no cards to be returned

  - name: "Test invalid request returns error"
    description: "Verifica che una richiesta con un parametro errato ritorni un errore."
    # Check that a request with an invalid parameter returns an error.
    request:
      method: "GET"
      endpoint: "{{base_url}}/asdasd"  # Invalid endpoint to trigger error
      params:
        invalid_param: "invalid"
    expected:
      status: 404
      response:
        type: "json"
        json:
          - key: "error"
            contains: "not-found"
